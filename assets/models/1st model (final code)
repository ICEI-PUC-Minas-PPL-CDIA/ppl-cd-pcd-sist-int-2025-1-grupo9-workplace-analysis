# ─────────────────────────────────────────────
# ETAPA 1: Imports
# ─────────────────────────────────────────────
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# ─────────────────────────────────────────────
# ETAPA 2: Leitura e preparação da base
# ─────────────────────────────────────────────
df = pd.read_excel("base_unificada_limpa.xlsx")
df.fillna("Não", inplace=True)

# Criar variável alvo binária
df["afetado_por_idade"] = df["experiência_prejudicada"].str.lower().str.contains("idade").astype(int)

# Seleção de features
features = [
    'idade', 'gênero', 'cor/raça/etnia', 'faixa_etária', 'pcd',
    'área_de_atuação', 'nível_de_escolaridade', 'tipo_de_empresa',
    'acesso_a_treinamentos_e_capacitações',
    'flexibilidade_de_trabalho_para_profissionais_55+',
    'satisfação_profissional', 'adequação_às_novas_tecnologias',
    'incentivo_à_diversidade_etária_na_empresa',
    'planos_de_aposentadoria_e_transição_de_carreira',
    'frequência_de_atualização_profissional',
    'barreiras_para_recolocação_profissional',
    'sentimento_de_valorização_na_empresa'
]

df_model = df[features + ['afetado_por_idade']].copy()

# Codificação de variáveis categóricas
for col in df_model.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df_model[col] = le.fit_transform(df_model[col])

# ─────────────────────────────────────────────
# ETAPA 3: Treinamento do modelo
# ─────────────────────────────────────────────
X = df_model.drop("afetado_por_idade", axis=1)
y = df_model["afetado_por_idade"]

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X, y)

# ─────────────────────────────────────────────
# ETAPA 4: Avaliação do modelo
# ─────────────────────────────────────────────
y_pred = rf_model.predict(X)

acc = accuracy_score(y, y_pred)
report = classification_report(y, y_pred)
matrix = confusion_matrix(y, y_pred)

print("Acurácia:", acc)
print("\nRelatório de Classificação:\n", report)
print("Matriz de Confusão:\n", matrix)
